import express from 'express';
import path from 'path';
import { ServerOptions } from "../proto/autogenerated/ts/express_server";
import { AdminContext, MetricsContext } from "../proto/autogenerated/ts/types";
import Main from './services/main'
import { getLogger } from './services/helpers/logger.js'

const serverOptions = (mainHandler: Main): ServerOptions => {
    const log = getLogger({})
    const app = express();
    const port = 3000; // You can change this to your preferred port

    // Resolve the absolute path to the 'static' directory
    const staticDir = path.resolve('static');

    // Serve static files from the 'static' directory
    app.use(express.static(staticDir));

    app.get('/', (req, res) => {
      res.sendFile(path.join(staticDir, 'setup.html'));
    });

    app.get('/connect', (req, res) => {
        res.sendFile(path.join(staticDir, 'connect.html'));
      });

    app.listen(port, () => {
      console.log(`Web view is running at http://localhost:${port}`);
    });

    return {
        logger: { log, error: err => log("ERROR", err) },
        AdminAuthGuard: adminAuth,
        MetricsAuthGuard: metricsAuth,
        AppAuthGuard: async (authHeader) => { return { app_id: mainHandler.applicationManager.DecodeAppToken(stripBearer(authHeader)) } },
        UserAuthGuard: async (authHeader) => { return mainHandler.appUserManager.DecodeUserToken(stripBearer(authHeader)) },
        GuestAuthGuard: async (_) => ({}),
        metricsCallback: metrics => mainHandler.settings.recordPerformance ? mainHandler.metricsManager.AddMetrics(metrics) : null,
        allowCors: true,
        logMethod: true,
        logBody: true
        //throwErrors: true
    }
}

const stripBearer = (header?: string) => {
    if (!header) {
        return ""
    }
    if (header.startsWith("Bearer ")) {
        return header.substring("Bearer ".length)
    }
    return header
}

const adminAuth = async (header: string | undefined): Promise<AdminContext> => {
    const AdminToken = process.env.ADMIN_TOKEN
    if (!AdminToken) {
        throw new Error("admin auth disabled")
    }
    if (!header) {
        throw new Error("admin header not found")
    }
    let h = header

    if (header.startsWith("Bearer ")) {
        h = header.substring("Bearer ".length)
    }
    if (h !== AdminToken) {
        throw new Error("admin token invalid")
    }
    return { admin_id: "admin1" }
}

const metricsAuth = async (header: string | undefined): Promise<MetricsContext> => {
    const metricsToken = process.env.METRICS_TOKEN || process.env.ADMIN_TOKEN
    if (!metricsToken) {
        throw new Error("metrics auth disabled")
    }
    if (!header) {
        throw new Error("metrics header not found")
    }
    let h = header

    if (header.startsWith("Bearer ")) {
        h = header.substring("Bearer ".length)
    }
    if (h !== metricsToken) {
        throw new Error("metrics token invalid")
    }
    return { operator_id: "metrics1" }
}
export default serverOptions